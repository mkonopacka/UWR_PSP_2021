```{r}
between(D, m - sd, m + sd)
```
```{r}
D[between(D, m - sd, m + sd)]
```
```{r}
sum(between(D, m - sd, m + sd))
```
```{r}
sum(between(D, m - sd, m + sd))
```
```{r}
sum(between(D, m - sd, m + sd))
```
```{r}
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
```
```{r}
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
```
p1
p2
p3
```{r}
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
c(p1, p2, p3)
```
```{r}
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
c(p1, p2, p3)
```
```{r, echo = FALSE}
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
c(p1, p2, p3)
```
```{r}
2
```
m
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
c(0.68, p1, 0.95, p2, 0.997, p3)
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
c(0.68, p1)
c(0.95, p2)
c(0.997, p3)
qqnorm(my_data$len, pch = 1, frame = FALSE, main = 'QQ-plot dla zmiennej D i rozkładu normalnego')
qqnorm(D, pch = 1, frame = FALSE, main = 'QQ-plot dla zmiennej D i rozkładu normalnego')
qqline(D, col = "steelblue", lwd = 2)
D1 <- D + min(D)
D1
D1 < 0
U <- sqrt(D1)
load('grades.txt')
load('grades.RData')
IQ <- grades$IQ
P <- grades$TestPsych
?qt
library(stats)
load('grades.RData')
IQ <- grades$IQ
P <- grades$TestPsych
zad4 <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału jako wektor c(low, high)
sd <- sd(V) ## z dokumentacji wynika, że to liczy estymator z mianownikiem n-1
meanX <- mean(V)
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 stopniami swobody
low <- meanX - t*s/sqrt(n)
high <- meanX + t*s/sqrt(n)
return(c(low = low, high = high))
}
zad4(IQ)
library(stats)
load('grades.RData')
IQ <- grades$IQ
P <- grades$TestPsych
zad4 <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału jako wektor c(low, high)
s <- sd(V) ## z dokumentacji wynika, że to liczy estymator z mianownikiem n-1
meanX <- mean(V)
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 stopniami swobody
low <- meanX - t*s/sqrt(n)
high <- meanX + t*s/sqrt(n)
return(c(low = low, high = high))
}
zad4(IQ)
zad4(P)
library(stats)
load('grades.RData')
IQ <- grades$IQ
P <- grades$TestPsych
zad4 <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału jako wektor c(low, high)
s <- sd(V) ## z dokumentacji wynika, że to liczy estymator z mianownikiem n-1
meanX <- mean(V)
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 stopniami swobody
low <- meanX - t*s/sqrt(n)
high <- meanX + t*s/sqrt(n)
return(c(low = low, high = high))
}
zad4(IQ) %>% knitr:kable(caption = 'IQ')
library(stats)
load('grades.RData')
IQ <- grades$IQ
P <- grades$TestPsych
zad4 <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału jako wektor c(low, high)
s <- sd(V) ## z dokumentacji wynika, że to liczy estymator z mianownikiem n-1
meanX <- mean(V)
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 stopniami swobody
low <- meanX - t*s/sqrt(n)
high <- meanX + t*s/sqrt(n)
return(c(low = low, high = high))
}
zad4(IQ) %>% knitr::kable(caption = 'IQ')
zad4(P)
zad4(IQ)
library(stats)
load('grades.RData')
IQ <- grades$IQ
P <- grades$TestPsych
zad4 <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału jako wektor c(low, high)
s <- sd(V) ## z dokumentacji wynika, że to liczy estymator z mianownikiem n-1
meanX <- mean(V)
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 stopniami swobody
print(t)
low <- meanX - t*s/sqrt(n)
high <- meanX + t*s/sqrt(n)
return(c(low = low, high = high))
}
zad4(IQ)
?kable
kable(U)
knitr::kable(U)
knitr::opts_chunk$set(echo = TRUE, warnings = FALSE, message = FALSE)
library(tidyverse)
library(formattable)
data.frame(mean_U = mean(U), mean_D1 = mean(D1))
data.frame(mean_U = mean(U), mean_D1 = mean(D1), mean(D) = mean(D1))
data.frame(mean_U = mean(U), mean_D1 = mean(D1), mean_D = mean(D))
data.frame(mean_U^2 = mean(U^2), mean_D1 = mean(D1), mean_D = mean(D))
data.frame(mean_U\^2 = mean(U^2), mean_D1 = mean(D1), mean_D = mean(D))
data.frame(squared_mean_U = mean(U)^2, mean_D1 = mean(D1), mean_D = mean(D))
data.frame(squared_mean_U = mean(U)^2, mean_D1 = mean(D1), mean_D = mean(D), diff = mean_D1 - mean_D)
data.frame(squared_mean_U = mean(U)^2, mean_D1 = mean(D1), mean_D = mean(D)) %?% mutate(diff = mean_D1 - mean_D)
library(tidyverse)
data.frame(squared_mean_U = mean(U)^2, mean_D1 = mean(D1), mean_D = mean(D)) %?% mutate(diff = mean_D1 - mean_D)
data.frame(squared_mean_U = mean(U)^2, mean_D1 = mean(D1), mean_D = mean(D)) %>% mutate(diff = mean_D1 - mean_D)
min(D)
hist1 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej D', fill = I('blue'), alpha = I(0.5))
data.frame(mean_U2 = mean(U)^2, mean_D1 = mean(D1), sigma_U = var(U)) %>% mutate(diff_mD1_mU2 = mean_D1 - mean_U2)
data.frame(sq_mean_U = mean(U)^2, mean_D1 = mean(D1), sigma_U = var(U)) %>% mutate(diff_mD1_mU2 = mean_D1 - mean_U2)
?var
qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej D1', fill = I('red'), alpha = I(0.5)) +
qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej U', fill = I('blue'), alpha = I(0.5))
ggplot(data = NULL) +
geom_histogram(aes(x = U)) +
geom_histogram(aes(x = D1))
ggplot(data = NULL) +
geom_histogram(aes(x = U)) +
geom_histogram(aes(x = D1))
ggplot(data = NULL) +
geom_histogram(aes(x = D1))
hist3 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej D1', fill = I('red'), alpha = I(0.5))
hist2 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej U', fill = I('blue'), alpha = I(0.5))
library(gridExtra)
grid.arrange(hist3, hist2)
grid.arrange(hist3, hist2, cols = 2)
grid.arrange(hist3, hist2, nco = 2)
grid.arrange(hist3, hist2, ncol = 2)
hist3 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej D1', fill = I('red'), alpha = I(0.5), bins = 100)
hist2 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej U', fill = I('blue'), alpha = I(0.5), bins = 100)
library(gridExtra)
grid.arrange(hist3, hist2, ncol = 2)
View(income)
pw <- nrow(filter(income, Sector >= 5))/nrow(income)
income_wyzsze <- filter(income, Sector >= 5)
View(income_wyzsze)
pw <- nrow(filter(income, Education >= 5))/nrow(income)
pw
Vp <- income[Education >= 5]
Vp <- income[income$Education >= 5]
Vp <- income$Education >= 5
przedzial_p = przedzial_p(Vp)
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V) # estymator p
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V) # estymator p
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 df
low <- meanX - t*sqrt((p*(1-p)/n))
high <- meanX + t*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
przedzial_p = przedzial_p(Vp)
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V) # estymator p
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 df
low <- p - t*sqrt((p*(1-p)/n))
high <- p + t*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
Vp <- income$Education >= 5 # wektor TRUE/FALSE
przedzial_p = przedzial_p(Vp)
przedzial_p
sum(Vp)
n <- length(Vp)
n
t <- qt(p = 1 - (1-0.95)/2, df = n-1)
t
p <- sum(V)
p <- sum(Vp)
low <- p - t*sqrt((p*(1-p)/n))
p
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V)/length(V) # estymator p
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 df
low <- p - t*sqrt((p*(1-p)/n))
high <- p + t*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
Vp <- income$Education >= 5 # wektor TRUE/FALSE
przedzial_p = przedzial_p(Vp)
data.frame(low = przedzial_p$low, real_p = pw, high = przedzial_p$high) %>% mutate(inside = between(pw, low, high))
przedzial_p["low"]
przedzial_p[low]
data.frame(low = przedzial_p["low"], real_p = pw, high = przedzial_p["high"]) %>% mutate(inside = between(pw, low, high))
przedzial_mu_U = przedzial_mu(U)
```{r echo=TRUE}
library(stats)
load('grades.RData')
IQ <- grades$IQ
P <- grades$TestPsych
przedzial_mu <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla wartosci oczekiwanej z nieznanym t
s <- sd(V) ## z dokumentacji wynika, że to liczy estymator z mianownikiem n-1
meanX <- mean(V)
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 df
low <- meanX - t*s/sqrt(n)
high <- meanX + t*s/sqrt(n)
return(c(low = low, high = high))
}
przedzial_mu(IQ)
przedzial_mu(P)
przedzial_mu_U = przedzial_mu(U)
data.frame(low = przedzial_mu_U["low"], real_mu_U = mean(U), high = przedzial_mu_U["high"]) %>% mutate(inside = between(real_mu_U, low, high))
przedzial_mu_D = przedzial_mu(D)
data.frame(low = przedzial_mu_D["low"], real_mu_D = mean(D), high = przedzial_mu_D["high"]) %>% mutate(inside = between(real_mu_D, low, high))
Vp <- income$Education >= 5 # wektor TRUE/FALSE
przedzial_p = przedzial_p(Vp)
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V)/length(V) # estymator p
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 df
low <- p - t*sqrt((p*(1-p)/n))
high <- p + t*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
przedzial_mu_U = przedzial_mu(U)
data.frame(low = przedzial_mu_U["low"], real_mu_U = mean(U), high = przedzial_mu_U["high"]) %>% mutate(inside = between(real_mu_U, low, high))
przedzial_mu_D = przedzial_mu(D)
data.frame(low = przedzial_mu_D["low"], real_mu_D = mean(D), high = przedzial_mu_D["high"]) %>% mutate(inside = between(real_mu_D, low, high))
Vp <- income$Education >= 5 # wektor TRUE/FALSE
przedzial_p = przedzial_p(Vp)
data.frame(low = przedzial_p["low"], real_p = pw, high = przedzial_p["high"]) %>% mutate(inside = between(pw, low, high))
knitr::opts_chunk$set(echo = TRUE, warnings = FALSE, message = FALSE)
library(tidyverse)
library(formattable)
eksperyment1 <- function(mu = 0, sd = 1, n = 100, poziom = 0.95, iter = 1000){
trafione <- 0
szer_suma <- 0
z <- qnorm(1 - (1-poziom)/2, mu, sd)
for (i in 1:iter){
X <- rnorm(n, mu, sd)
meanX <- mean(X)
low <- meanX - z*sd/sqrt(n)
high <- meanX + z*sd/sqrt(n)
szer_suma <- szer_suma + high - low
if (between(mu, low, high)){
trafione <- trafione + 1
}
return (data.frame(mu = mu,
sd = sd,
n = as.integer(n),
poziom = poziom,
iter = as.integer(iter),
trafienia = trafione/iter,
sr_szer_przedzialu = szer_suma/iter))
}
eksperyment1() %>%
rbind(eksperyment1(n = 200)) %>%
knitr::kable(caption = 'Wyniki dla podpunktow b i c')
load('income.RData')
D <- income$Income
sd <- sd(D)
m <- mean(D)
hist1 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej D', fill = I('blue'), alpha = I(0.5))
hist1
p1 <- sum(between(D, m - sd, m + sd))/length(D)
p2 <- sum(between(D, m - 2*sd, m + 2*sd))/length(D)
p3 <- sum(between(D, m - 3*sd, m + 3*sd))/length(D)
c(0.68, p1)
c(0.95, p2)
c(0.997, p3)
qqnorm(D, pch = 1, frame = FALSE, main = 'QQ-plot dla zmiennej D i rozkładu normalnego')
qqline(D, col = "steelblue", lwd = 2)
D1 <- D + min(D) # przesuniety wektor dochodów
U <- sqrt(D1) # tzn. że D1 = U^2
data.frame(sq_mean_U = mean(U)^2, mean_D1 = mean(D1), sigma_U = mean((U-mean(U))^2)
) %>% mutate(diff_mD1_mU2 = mean_D1 - sq_mean_U)
hist3 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej D1', fill = I('red'), alpha = I(0.5), bins = 100)
hist2 <- qplot(D, geom = 'histogram', xlab = '', main = 'Histogram zmiennej U', fill = I('blue'), alpha = I(0.5), bins = 100)
library(gridExtra)
grid.arrange(hist3, hist2, ncol = 2)
pw <- nrow(filter(income, Education >= 5))/nrow(income)
pw
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V)/length(V) # estymator p
n <- length(V)
t <- qt(p = 1 - (1-poziom)/2, df = n-1) # kwantyl rozkładu studenta z n-1 df
low <- p - t*sqrt((p*(1-p)/n))
high <- p + t*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
przedzial_mu_U = przedzial_mu(U)
U_sample <- sample(U, 200)
przedzial_mu_U_sample = przedzial_mu(U_sample)
przedzial_mu <- function(V, sd_pop, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla wartosci oczekiwanej; znany parametr sd_pop -> rozklad normalny
s <- sd_pop
meanX <- mean(V)
n <- length(V)
u <- qt(p = 1 - (1-poziom)/2)
low <- meanX - u*s/sqrt(n)
high <- meanX + u*s/sqrt(n)
return(c(low = low, high = high))
}
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V)/length(V) # estymator p
n <- length(V)
u <- qnorm(p = 1 - (1-poziom)/2)
low <- p - u*sqrt((p*(1-p)/n))
high <- p + u*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
sd_U <- sqrt(mean((U - mean(U))^2))
U_sample <- sample(U, 200)
sd_U <- sqrt(mean((U - mean(U))^2))
przedzial_mu_U_sample = przedzial_mu(U_sample, sd_pop = sd_U)
przedzial_mu <- function(V, sd_pop, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla wartosci oczekiwanej; znany parametr sd_pop -> rozklad normalny
s <- sd_pop
meanX <- mean(V)
n <- length(V)
u <- qnorm(p = 1 - (1-poziom)/2)
low <- meanX - u*s/sqrt(n)
high <- meanX + u*s/sqrt(n)
return(c(low = low, high = high))
}
przedzial_mu_U_sample = przedzial_mu(U_sample, sd_pop = sd_U)
data.frame(low = przedzial_mu_U["low"], real_mu_U = mean(U), high = przedzial_mu_U["high"]) %>% mutate(inside = between(real_mu_U, low, high))
data.frame(low = przedzial_mu_U_sample["low"], real_mu_U = mean(U), high = przedzial_mu_U_sample["high"]) %>% mutate(inside = between(real_mu_U, low, high))
D_sample <- sample(D, 200)
sd_D <- sqrt(mean((D - mean(D))^2))
przedzial_mu_D_sample = przedzial_mu(D, sd_D)
data.frame(low = przedzial_mu_D_sample["low"], real_mu_D = mean(D), high = przedzial_mu_D_sample["high"]) %>% mutate(inside = between(real_mu_D, low, high))
Vp <- income$Education >= 5 # wektor TRUE/FALSE
przedzial_p = przedzial_p(Vp)
V_sample <- sample(Vp, 200)
przedzial_p = przedzial_p_sample(V_sample)
przedzial_p = przedzial_p(V_sample)
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V)/length(V) # estymator p
n <- length(V)
u <- qnorm(p = 1 - (1-poziom)/2)
low <- p - u*sqrt((p*(1-p)/n))
high <- p + u*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
przedzial_p = przedzial_p(V_sample)
data.frame(low = przedzial_p_sample["low"], real_p = pw, high = przedzial_p_sample["high"]) %>% mutate(inside = between(pw, low, high))
przedzial_p_sample = przedzial_p(V_sample)
przedzial_p <- function(V, poziom = 0.95){
# Funkcja zwraca lewy i prawy brzeg przedziału ufności dla p; V powinien być wektorem TRUE / FALSE
p <- sum(V)/length(V) # estymator p
n <- length(V)
u <- qnorm(p = 1 - (1-poziom)/2)
low <- p - u*sqrt((p*(1-p)/n))
high <- p + u*sqrt((p*(1-p)/n))
return(c(low = low, high = high))
}
przedzial_p_sample = przedzial_p(V_sample)
data.frame(low = przedzial_p_sample["low"], real_p = pw, high = przedzial_p_sample["high"]) %>% mutate(inside = between(pw, low, high))
it = 200
est_p <- numeric(length = it)
est_mu_U <- numeric(length = it)
est_mu_D <- numeric(length = it)
# pobranie prób
sampleV <- sample(V,200)
sampleU <- sample(U,200)
sampleD <- sample(D,200)
# obliczenie estymatorow
p <- sum(sampleV)/200
# pobranie prób
sampleV <- sample(V,200)
# pobranie prób
sampleV <- sample(Vp,200)
sampleU <- sample(U,200)
sampleD <- sample(D,200)
# obliczenie estymatorow
p <- sum(sampleV)/200
est_U <- mean(sampleU)
est_D <- mean(sampleD)
mu_U <- mean(sampleU)
mu_D <- mean(sampleD)
est_mu_U[i] <- mu_U
for (i in 1:it){
# pobranie prób
sampleV <- sample(Vp,200)
sampleU <- sample(U,200)
sampleD <- sample(D,200)
# obliczenie estymatorow
p <- sum(sampleV)/200
mu_U <- mean(sampleU)
mu_D <- mean(sampleD)
# zapisanie ich do wektorow w celu pozniejszego rysowania histogramu
est_p[i] <- p
est_mu_U[i] <- mu_U
est_mu_D[i] <- mu_D
# sprawdzenie przedzialow
pp <- przedzial_p(sampleV)
pU <-przedzial_mu(sampleU, sd_U)
pD <- przedzial_mu(sampleD, sd_D)
if (between(pw, pp[0], pp[1])){zawiera_p <- zawiera_p + 1}
if (between(mean(U), pU[0], pU[1])){zawiera_U <- zawiera_U + 1}
if (between(mean(D), pD[0], pD[1])){zawiera_D <- zawiera_D + 1}
}
it = 200
est_p <- numeric(length = it)
est_mu_U <- numeric(length = it)
est_mu_D <- numeric(length = it)
zawiera_p <- 0
zawiera_U <- 0
zawiera_D <- 0
for (i in 1:it){
# pobranie prób
sampleV <- sample(Vp,200)
sampleU <- sample(U,200)
sampleD <- sample(D,200)
# obliczenie estymatorow
p <- sum(sampleV)/200
mu_U <- mean(sampleU)
mu_D <- mean(sampleD)
# zapisanie ich do wektorow w celu pozniejszego rysowania histogramu
est_p[i] <- p
est_mu_U[i] <- mu_U
est_mu_D[i] <- mu_D
# sprawdzenie przedzialow
pp <- przedzial_p(sampleV)
pU <-przedzial_mu(sampleU, sd_U)
pD <- przedzial_mu(sampleD, sd_D)
if (between(pw, pp[0], pp[1])){zawiera_p <- zawiera_p + 1}
if (between(mean(U), pU[0], pU[1])){zawiera_U <- zawiera_U + 1}
if (between(mean(D), pD[0], pD[1])){zawiera_D <- zawiera_D + 1}
}
p1 <- qplot(est_p, geom = 'histogram', main = 'Histogram: rozklad probkowy estymatora p')
p2 <- qplot(est_p, geom = 'histogram', main = 'Histogram: rozklad probkowy estymatora sredniej dla U')
p3 <- qplot(est_p, geom = 'histogram', main = 'Histogram: rozklad probkowy estymatora sredniej dla D')
grid.arrange(p1,p2,p3, ncol = 3)
p1 <- qplot(est_p, geom = 'histogram', main = 'Histogram: rozklad probkowy estymatora p', xlab = '')
p2 <- qplot(est_mu_U, geom = 'histogram', main = 'Histogram: rozklad probkowy estymatora sredniej dla U', xlab = '')
p3 <- qplot(est_mu_D, geom = 'histogram', main = 'Histogram: rozklad probkowy estymatora sredniej dla D', xlab = '')
grid.arrange(p1,p2,p3, ncol = 3)
p1 <- qplot(est_p, geom = 'histogram', main = 'Rozklad probkowy estymatora p', xlab = '') + theme(plot.title = element_text(size= 10))
p2 <- qplot(est_mu_U, geom = 'histogram', main = 'Rozklad probkowy estymatora sredniej dla U', xlab = '') + theme(plot.title = element_text(size= 10))
p3 <- qplot(est_mu_D, geom = 'histogram', main = 'Rozklad probkowy estymatora sredniej dla D', xlab = '') + theme(plot.title = element_text(size=10))
grid.arrange(p1,p2,p3, ncol = 3)
p1 <- qplot(est_p, geom = 'histogram', main = 'Rozklad probkowy estymatora p', xlab = '') + theme(plot.title = element_text(size= 6))
p2 <- qplot(est_mu_U, geom = 'histogram', main = 'Rozklad probkowy estymatora sredniej dla U', xlab = '') + theme(plot.title = element_text(size= 6))
p3 <- qplot(est_mu_D, geom = 'histogram', main = 'Rozklad probkowy estymatora sredniej dla D', xlab = '') + theme(plot.title = element_text(size=6))
grid.arrange(p1,p2,p3, ncol = 3)
data.frame(frakcja = zawiera_p / 200, srednia_U = zawiera_U / 200, srednia_D = zawiera_D / 200)
