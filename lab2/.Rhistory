geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_10))
p20z <- qplot(sample_means_20, main = 'n = 20', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_10)) +
xlim(mean(all)- 1000, mean(all)+ 1000)
p100z <- qplot(sample_means_100, main = 'n = 100', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_100)) +
xlim(mean(all)- 1000, mean(all)+ 1000)
p100 <- qplot(sample_means_100, main = 'n = 100', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_100))
p200 <- qplot(sample_means_200, main = 'n = 200', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_200))
p200z <- qplot(sample_means_200, main = 'n = 200', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_200)) +
xlim(mean(all)- 1000, mean(all)+ 1000)
grid.arrange(p20,p100,p200, p20z, p100z, p200z, ncol = 3,
top = textGrob("Histogramy srednich probkowych dla prob o roznej liczebnosci", gp = gpar(fontsize = 15)))
iter = 200 # może zechcę przetestować inne n
sample_means_200 <- numeric(iter)
sample_means_10 <- numeric(iter)
sample_means_100 <- numeric(iter)
for (i in 1:iter){
sample_means_20[i] <- mean(sample(all, 20))
sample_means_100[i] <- mean(sample(all, 100))
sample_means_200[i] <- mean(sample(all, 200))
}
p20 <- qplot(sample_means_20, main = 'n = 20', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_20))
p20z <- qplot(sample_means_20, main = 'n = 20', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_20)) +
xlim(mean(all)- 1000, mean(all)+ 1000)
p100z <- qplot(sample_means_100, main = 'n = 100', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_100)) +
xlim(mean(all)- 1000, mean(all)+ 1000)
p100 <- qplot(sample_means_100, main = 'n = 100', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_100))
p200 <- qplot(sample_means_200, main = 'n = 200', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_200))
p200z <- qplot(sample_means_200, main = 'n = 200', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_200)) +
xlim(mean(all)- 1000, mean(all)+ 1000)
grid.arrange(p20,p100,p200, p20z, p100z, p200z, ncol = 3,
top = textGrob("Histogramy srednich probkowych dla prob o roznej liczebnosci", gp = gpar(fontsize = 15)))
iter = 200 # może zechcę przetestować inne n
sample_means_200 <- numeric(iter)
sample_means_10 <- numeric(iter)
sample_means_100 <- numeric(iter)
for (i in 1:iter){
sample_means_20[i] <- mean(sample(all, 20))
sample_means_100[i] <- mean(sample(all, 100))
sample_means_200[i] <- mean(sample(all, 200))
}
p20 <- qplot(sample_means_20, main = 'n = 20', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_20))
p100 <- qplot(sample_means_100, main = 'n = 100', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_100))
p200 <- qplot(sample_means_200, main = 'n = 200', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_200))
grid.arrange(p20,p100,p200,ncol = 3,
top = textGrob("Histogramy srednich probkowych dla prob o roznej liczebnosci", gp = gpar(fontsize = 15)))
iter = 10000 # może zechcę przetestować inne n
sample_means_200 <- numeric(iter)
sample_means_10 <- numeric(iter)
sample_means_100 <- numeric(iter)
for (i in 1:iter){
sample_means_20[i] <- mean(sample(all, 20))
sample_means_100[i] <- mean(sample(all, 100))
sample_means_200[i] <- mean(sample(all, 200))
}
p20 <- qplot(sample_means_20, main = 'n = 20', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_20))
p100 <- qplot(sample_means_100, main = 'n = 100', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_100))
p200 <- qplot(sample_means_200, main = 'n = 200', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_200))
grid.arrange(p20,p100,p200,ncol = 3,
top = textGrob("Histogramy srednich probkowych dla prob o roznej liczebnosci", gp = gpar(fontsize = 15)))
iter = 200 # może zechcę przetestować inne n
sample_means_200 <- numeric(iter)
sample_means_10 <- numeric(iter)
sample_means_100 <- numeric(iter)
for (i in 1:iter){
sample_means_20[i] <- mean(sample(all, 20))
sample_means_100[i] <- mean(sample(all, 100))
sample_means_200[i] <- mean(sample(all, 200))
}
p20 <- qplot(sample_means_20, main = 'n = 20', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_20))
p100 <- qplot(sample_means_100, main = 'n = 100', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_100))
p200 <- qplot(sample_means_200, main = 'n = 200', xlab = '') +
geom_vline(data = NULL, xintercept = mean(all), col = 'red') +
geom_vline(data = NULL, xintercept = mean(sample_means_200))
grid.arrange(p20,p100,p200,ncol = 3,
top = textGrob("Histogramy srednich probkowych dla prob o roznej liczebnosci", gp = gpar(fontsize = 15)))
?rbernoulli
rbernoulli(100,0.5)
?binomial
?rbinom
bernoulli <- rbinom(1000, 100, 0.3)
normal_approx <- rnorm(1000, 30, sqrt(21))
bernoulli
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(1000, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(5),
odsetek_normalny = numeric(5))
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(1000, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(1000, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
View(wyniki)
?between
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))
}
wyniki
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/1000
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/1000
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
bernoulli <- rbinom(1000, 100, 0.3)
normal_approx <- rnorm(1000, 30, sqrt(21))
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/1000
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/1000
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(100, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
bernoulli <- rbinom(1000, 100, 0.3)
normal_approx <- rnorm(1000, 30, sqrt(21))
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(100, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/1000
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/1000
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
bernoulli <- rbinom(1000, 100, 0.3)
normal_approx <- rnorm(1000, 30, sqrt(21))
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/1000
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/1000
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
bernoulli <- rbinom(10000, 100, 0.3)
normal_approx <- rnorm(10000, 30, sqrt(21))
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/1000
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/1000
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
bernoulli <- rbinom(10000, 100, 0.3)
normal_approx <- rnorm(10000, 30, sqrt(21))
wyniki <- data.frame(a = c(-1000, -10, 0, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 1000, 1000, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/10000
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/10000
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
normal_approx
sum(normal_approx < 0)
qplot(normal_approx)
bernoulli <- rbinom(10000, 100, 0.3)
normal_approx <- rnorm(10000, 30, sqrt(21))
wyniki <- data.frame(a = c(-10, 0, 10, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 10, 20, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/10000
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/10000
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
bernoulli <- rbinom(100, 100, 0.3)
normal_approx <- rnorm(100, 30, sqrt(21))
wyniki <- data.frame(a = c(-10, 0, 10, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 10, 20, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/100
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/100
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
bernoulli <- rbinom(100, 100, 0.3)
normal_approx <- rnorm(100, 30, sqrt(21))
wyniki <- data.frame(a = c(-10, 0, 10, 30 - 3*sqrt(21), 30 - 2*sqrt(21), 30 - sqrt(21)),
b = c(0, 10, 20, 30 + 3*sqrt(21), 30 + 2*sqrt(21), 30 + sqrt(21)),
odsetek_bernoulli = numeric(6),
odsetek_normalny = numeric(6))
for (i in 1:6){
a = wyniki$a[i]
b = wyniki$b[i]
wyniki$odsetek_bernoulli[i] <- sum(between(bernoulli, a, b))/100
wyniki$odsetek_normalny[i] <- sum(between(normal_approx, a, b))/100
}
wyniki %>% knitr::kable(caption = 'Wyniki eksperymentu')
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(data.table)
library(gridExtra)
# Wczytanie danych
grades <- fread(file = "grades.txt",
data.table = FALSE,
check.names = TRUE,
stringsAsFactors = TRUE,
col.names = c("Id", "GPA", "IQ", "Gender", "TestPsych"))
income <- fread(file = "income.dat",
data.table = FALSE,
check.names = TRUE,
stringsAsFactors = TRUE,
col.names = c("Id", "Age", "Education", "Gender", "Income", "Sector"))
income$Gender <- factor(income$Gender)
levels(income$Gender) <- c('M','K')
# Grupowanie i przekształcenie dataframe
grades %>% select(c(IQ, GPA, TestPsych, Gender)) %>% gather('var', 'val', GPA, TestPsych, IQ) %>% group_by(var) -> grades1
# Zebranie odpowiednich statystyk
grades_stats <-
grades1 %>% summarise(mean = mean(val), median = median(val),
Q1 = quantile(val, 0.25), Q3 = quantile(val, 0.75),
min = min(val), max = max(val),
sd = sd(val), variance = var(val),
CV = sd(val)/mean(val))
grades_stats %>% knitr::kable(caption = 'Wartości statystyk dla zmiennych ilościowych w zbiorze grades.txt')
# Histogramy
plot1 <-
ggplot(grades_stats) +
geom_histogram(data = grades1, aes(x = val, fill = var), bins = 15, alpha = 0.4) +
theme_bw() +
theme(plot.title.position = "plot", plot.caption.position =  "plot", legend.position = "none") +
geom_vline(aes(xintercept = mean), col = 'red') +
geom_vline(aes(xintercept = Q1), linetype = 'dashed') +
geom_vline(aes(xintercept = median), linetype = 'dashed') +
geom_vline(aes(xintercept = Q3), linetype = 'dashed')
plot1 +
facet_wrap(~var, scales = 'free') +
labs(x = '', y = '', title = 'Histogramy zmiennych ilosciowych w zbiorze grades.txt', subtitle = 'Linią ciągłą zaznaczono średnie, liniami przerywanymi kwartyle 25%, 50%, 75%')
grades2 <- grades1 %>% group_by(Gender, var)
grades_stats_gender <-
grades2 %>% summarise(mean = mean(val), median = median(val),
Q1 = quantile(val, 0.25), Q3 = quantile(val, 0.75),
min = min(val), max = max(val),
sd = sd(val), variance = var(val),
CV = sd(val)/mean(val))
grades_stats_gender %>% knitr::kable(caption = 'Porównanie statystyk dla zmiennych ilościowych ze względu na płeć')
# GENIALNY OPERATOR ZAMAIĘTAĆ GO! Nadpisuje dane w obiekcie plot
plot1 %+% grades_stats_gender +
facet_grid(rows = vars(Gender), cols = vars(var), scales = 'free') +
labs(x = '', y = '', title = 'Histogramy zmiennych ilosciowych w zbiorze grades.txt', subtitle = 'Porównanie wyników ze względu na płeć')
plt27<- qplot(data = grades,
x = IQ,
main = "27 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 27
)
plt5 <- qplot(data = grades,
x = IQ,
main = "5 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 5
)
plt50 <- qplot(data = grades,
x = IQ,
main = "50 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 50
)
plt15 <- qplot(data = grades,
x = IQ,
main = "15 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 15
)
plt90 <- qplot(data = grades,
x = IQ,
main = "78 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 78
)
grid.arrange(plt5, plt15, plt27, plt50, plt78, ncol = 5)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(data.table)
library(gridExtra)
# Wczytanie danych
grades <- fread(file = "grades.txt",
data.table = FALSE,
check.names = TRUE,
stringsAsFactors = TRUE,
col.names = c("Id", "GPA", "IQ", "Gender", "TestPsych"))
income <- fread(file = "income.dat",
data.table = FALSE,
check.names = TRUE,
stringsAsFactors = TRUE,
col.names = c("Id", "Age", "Education", "Gender", "Income", "Sector"))
income$Gender <- factor(income$Gender)
levels(income$Gender) <- c('M','K')
# Grupowanie i przekształcenie dataframe
grades %>% select(c(IQ, GPA, TestPsych, Gender)) %>% gather('var', 'val', GPA, TestPsych, IQ) %>% group_by(var) -> grades1
# Zebranie odpowiednich statystyk
grades_stats <-
grades1 %>% summarise(mean = mean(val), median = median(val),
Q1 = quantile(val, 0.25), Q3 = quantile(val, 0.75),
min = min(val), max = max(val),
sd = sd(val), variance = var(val),
CV = sd(val)/mean(val))
grades_stats %>% knitr::kable(caption = 'Wartości statystyk dla zmiennych ilościowych w zbiorze grades.txt')
# Histogramy
plot1 <-
ggplot(grades_stats) +
geom_histogram(data = grades1, aes(x = val, fill = var), bins = 15, alpha = 0.4) +
theme_bw() +
theme(plot.title.position = "plot", plot.caption.position =  "plot", legend.position = "none") +
geom_vline(aes(xintercept = mean), col = 'red') +
geom_vline(aes(xintercept = Q1), linetype = 'dashed') +
geom_vline(aes(xintercept = median), linetype = 'dashed') +
geom_vline(aes(xintercept = Q3), linetype = 'dashed')
plot1 +
facet_wrap(~var, scales = 'free') +
labs(x = '', y = '', title = 'Histogramy zmiennych ilosciowych w zbiorze grades.txt', subtitle = 'Linią ciągłą zaznaczono średnie, liniami przerywanymi kwartyle 25%, 50%, 75%')
grades2 <- grades1 %>% group_by(Gender, var)
grades_stats_gender <-
grades2 %>% summarise(mean = mean(val), median = median(val),
Q1 = quantile(val, 0.25), Q3 = quantile(val, 0.75),
min = min(val), max = max(val),
sd = sd(val), variance = var(val),
CV = sd(val)/mean(val))
grades_stats_gender %>% knitr::kable(caption = 'Porównanie statystyk dla zmiennych ilościowych ze względu na płeć')
# GENIALNY OPERATOR ZAMAIĘTAĆ GO! Nadpisuje dane w obiekcie plot
plot1 %+% grades_stats_gender +
facet_grid(rows = vars(Gender), cols = vars(var), scales = 'free') +
labs(x = '', y = '', title = 'Histogramy zmiennych ilosciowych w zbiorze grades.txt', subtitle = 'Porównanie wyników ze względu na płeć')
plt27<- qplot(data = grades,
x = IQ,
main = "27 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 27
)
plt5 <- qplot(data = grades,
x = IQ,
main = "5 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 5
)
plt50 <- qplot(data = grades,
x = IQ,
main = "50 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 50
)
plt15 <- qplot(data = grades,
x = IQ,
main = "15 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 15
)
plt78 <- qplot(data = grades,
x = IQ,
main = "78 klas",
xlab = "",
ylab = "",
geom = "histogram",
bins = 78
)
grid.arrange(plt5, plt15, plt27, plt50, plt78, ncol = 5)
# Zebranie statystyk
income_stats <-
income %>%
mutate(val = Income) %>%
summarise(mean = mean(val), median = median(val),
Q1 = quantile(val, 0.25), Q3 = quantile(val, 0.75),
out_l = Q1 - 1.5*(Q3-Q1),out_r = Q3 + 1.5*(Q3-Q1),
min = min(val), max = max(val),
sd = sd(val), variance = var(val),
CV = sd(val)/mean(val))
# Z podziałem na płeć
income_stats_gender <-
income %>%
mutate(val = Income) %>%
group_by(Gender) %>%
summarise(mean = mean(val), median = median(val),
Q1 = quantile(val, 0.25), Q3 = quantile(val, 0.75),
out_l = Q1 - 1.5*(Q3-Q1),out_r = Q3 + 1.5*(Q3-Q1),
min = min(val), max = max(val),
sd = sd(val), variance = var(val),
CV = sd(val)/mean(val))
plot2 <-
ggplot(income_stats) +
geom_histogram(data = income %>% mutate(val = Income), aes(x = val), bins = 15, alpha = 0.4) +
theme_bw() +
labs(x = '', y = '', title = 'Histogram zarobków', subtitle = 'Czerwoną linią zaznaczono średnie, liniami przerywanymi kwartyle, a niebieskimi progi obserwacji odstających') +
theme(plot.title.position = "plot", plot.caption.position =  "plot", legend.position = "none") +
geom_vline(aes(xintercept = mean), col = 'red') +
geom_vline(aes(xintercept = Q1), linetype = 'dashed') +
geom_vline(aes(xintercept = median), linetype = 'dashed') +
geom_vline(aes(xintercept = Q3), linetype = 'dashed') +
geom_vline(aes(xintercept = out_l), col = 'blue') +
geom_vline(aes(xintercept = out_r), col = 'blue')
plot2
income_stats %>% knitr::kable(caption = 'Statystyki zmiennej Income')
income_stats_gender %>% knitr::kable(caption = 'Statystyki zmiennej Income')
plot2 %+% income_stats_gender +
facet_wrap(~Gender) +
labs(subtitle = 'Porównanie ze względu na płeć')
# zadanie 3c - wyznaczanie obserwacji odstających
income_outliers <- income %>% filter(between(income, income_stats$out_l, income_stats$out_r))
View(income_outliers)
?shape
?size
nrow(income)
nrow(income_outliers)
View(income_outliers)
View(income_stats_gender)
View(income_stats)
income_outliers <- income %>% filter(! between(income, income_stats$out_l, income_stats$out_r))
head(income_outliers)
income_outliers <- income %>% filter(between(income, income_stats$out_l, income_stats$out_r))
View(income_outliers)
income_outliers <- income %>% filter(income >  income_stats$out_r)
View(income_outliers)
income
income_outliers <- income %>% filter(Income >  income_stats$out_r)
income_outliers <- income %>% filter(! between(Income, income_stats_out_l, income_stats$out_r))
income_outliers <- income %>% filter(! between(Income, income_stats$out_l, income_stats$out_r))
head(income_outliers)
nrow(income_outliers)
grades
